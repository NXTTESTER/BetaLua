-- EnhancedWRGui Premium Version
-- A premium GUI for Roblox games with improved design, animations, and functionality

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Reconnect character references when player respawns
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    Humanoid = newCharacter:WaitForChild("Humanoid")
    HumanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart")
    
    -- Reset active features when character respawns
    for _, feature in pairs(activeFeatures) do
        if feature.enabled then
            feature.toggle(false)
            feature.enabled = false
        end
    end
    
    -- Update the GUI buttons
    for _, button in pairs(featureButtonInstances) do
        local statusContainer = button:FindFirstChild("StatusContainer")
        if statusContainer then
            statusContainer.BackgroundColor3 = Color3.fromRGB(180, 40, 40)
            statusContainer.StatusLabel.Text = "OFF"
        end
    end
    
    -- Show notification
    CreateNotification("Character Reset", "Your character respawned. All features have been reset.", 3)
end)

-- Constants for tweening
local TWEEN_TIME = 0.3
local TWEEN_STYLE = Enum.EasingStyle.Quart
local TWEEN_DIRECTION = Enum.EasingDirection.Out

-- Feature control variables
local originalWalkSpeed = Humanoid.WalkSpeed
local originalJumpPower = Humanoid.JumpPower
local originalJumpHeight = Humanoid.JumpHeight
local originalGravity = workspace.Gravity
local espObjects = {}
local flyEnabled = false
local noclipEnabled = false
local godModeEnabled = false
local aimbotEnabled = false
local autoFarmEnabled = false
local activeFeatures = {}
local featureButtonInstances = {}

-- Enhanced Color palettes
local COLORS = {
    main = {
        background = Color3.fromRGB(25, 25, 50),
        title = Color3.fromRGB(40, 40, 80),
        border = Color3.fromRGB(90, 90, 220),
        highlight = Color3.fromRGB(100, 100, 255),
    },
    buttons = {
        close = Color3.fromRGB(220, 50, 50),
        minimize = Color3.fromRGB(255, 165, 0),
        restore = Color3.fromRGB(80, 80, 200),
        feature = Color3.fromRGB(40, 40, 100),
        featureHover = Color3.fromRGB(55, 55, 130),
        featureActive = Color3.fromRGB(70, 70, 160),
    },
    text = {
        title = Color3.fromRGB(255, 215, 0),  -- Gold color
        button = Color3.fromRGB(255, 255, 255),
        feature = Color3.fromRGB(220, 220, 255),
        subtitle = Color3.fromRGB(170, 170, 220),
    }
}

-- Create the main ScreenGui
local menu = Instance.new("ScreenGui")
menu.Name = "WR"
menu.Parent = game.CoreGui
menu.ResetOnSpawn = false
menu.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Create the main frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 280, 0, 350)  -- Increased size for more content
frame.Position = UDim2.new(0.05, 0, 0.05, 0)
frame.BackgroundColor3 = COLORS.main.background
frame.BorderSizePixel = 0  -- Remove border to add corner radius
frame.Parent = menu

-- Add corner radius to the frame
local cornerRadius = Instance.new("UICorner")
cornerRadius.CornerRadius = UDim.new(0, 10)
cornerRadius.Parent = frame

-- Add a border using UIStroke
local frameBorder = Instance.new("UIStroke")
frameBorder.Color = COLORS.main.border
frameBorder.Thickness = 2
frameBorder.Transparency = 0.2
frameBorder.Parent = frame

-- Add shadow effect
local shadow = Instance.new("ImageLabel")
shadow.AnchorPoint = Vector2.new(0.5, 0.5)
shadow.BackgroundTransparency = 1
shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
shadow.Size = UDim2.new(1, 25, 1, 25)
shadow.ZIndex = -1
shadow.Image = "rbxassetid://6014261993"  -- Shadow asset
shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
shadow.ImageTransparency = 0.4
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(49, 49, 450, 450)
shadow.Parent = frame

-- Create the title bar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 40)  -- Increased height
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = COLORS.main.title
titleBar.BorderSizePixel = 0
titleBar.ZIndex = 2
titleBar.Parent = frame

-- Add corner radius to title bar
local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 10)
titleCorner.Parent = titleBar

-- Fix bottom corners of title bar
local titleBarFix = Instance.new("Frame")
titleBarFix.Size = UDim2.new(1, 0, 0, 15)
titleBarFix.Position = UDim2.new(0, 0, 1, -15)
titleBarFix.BackgroundColor3 = COLORS.main.title
titleBarFix.BorderSizePixel = 0
titleBarFix.ZIndex = 2
titleBarFix.Parent = titleBar

-- Create a gradient for the title bar - more premium look with blue shades
local titleGradient = Instance.new("UIGradient")
titleGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 120)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 90))
})
titleGradient.Rotation = 90
titleGradient.Parent = titleBar

-- Create a gradient for the main frame - deeper blue theme
local frameGradient = Instance.new("UIGradient")
frameGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 65)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 45))
})
frameGradient.Rotation = 45
frameGradient.Parent = frame

-- Add title text with enhanced styling
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -100, 1, 0)
title.Position = UDim2.new(0, 15, 0, 0)
title.BackgroundTransparency = 1
title.Text = "✨ WRGui Premium ✨"
title.TextColor3 = COLORS.text.title
title.Font = Enum.Font.GothamBold
title.TextSize = 20
title.TextXAlignment = Enum.TextXAlignment.Left
title.ZIndex = 3
title.Parent = titleBar

-- Create close button with enhanced styling
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.Text = "✖"
closeButton.BackgroundColor3 = COLORS.buttons.close
closeButton.TextColor3 = COLORS.text.button
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 16
closeButton.BorderSizePixel = 0
closeButton.ZIndex = 3
closeButton.Parent = titleBar

-- Add corner radius to close button
local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 8)
closeCorner.Parent = closeButton

-- Create minimize button with enhanced styling
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -75, 0, 5)
minimizeButton.Text = "➖"
minimizeButton.BackgroundColor3 = COLORS.buttons.minimize
minimizeButton.TextColor3 = Color3.fromRGB(0, 0, 0)
minimizeButton.Font = Enum.Font.GothamBold
minimizeButton.TextSize = 16
minimizeButton.BorderSizePixel = 0
minimizeButton.ZIndex = 3
minimizeButton.Parent = titleBar

-- Add corner radius to minimize button
local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 8)
minimizeCorner.Parent = minimizeButton

-- Create restore button (visible when minimized) with enhanced styling
local showButton = Instance.new("TextButton")
showButton.Size = UDim2.new(0, 50, 0, 50)
showButton.Position = UDim2.new(0, 10, 0, 10)
showButton.Text = "WR"
showButton.BackgroundColor3 = COLORS.buttons.restore
showButton.TextColor3 = COLORS.text.button
showButton.Font = Enum.Font.GothamBold
showButton.TextSize = 20
showButton.BorderSizePixel = 0
showButton.Visible = false
showButton.ZIndex = 5
showButton.Parent = menu

-- Add corner radius to show button (circular)
local showCorner = Instance.new("UICorner")
showCorner.CornerRadius = UDim.new(1, 0)  -- Make it circular
showCorner.Parent = showButton

-- Add shadow to show button
local showShadow = Instance.new("ImageLabel")
showShadow.AnchorPoint = Vector2.new(0.5, 0.5)
showShadow.BackgroundTransparency = 1
showShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
showShadow.Size = UDim2.new(1, 20, 1, 20)
showShadow.ZIndex = 4
showShadow.Image = "rbxassetid://6014261993"
showShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
showShadow.ImageTransparency = 0.4
showShadow.ScaleType = Enum.ScaleType.Slice
showShadow.SliceCenter = Rect.new(49, 49, 450, 450)
showShadow.Parent = showButton

-- Create content container
local contentContainer = Instance.new("Frame")
contentContainer.Size = UDim2.new(1, -20, 1, -50)
contentContainer.Position = UDim2.new(0, 10, 0, 45)
contentContainer.BackgroundTransparency = 1
contentContainer.Parent = frame

-- Add scrolling frame for content with enhanced styling
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, 0, 1, -25)
scrollFrame.BackgroundTransparency = 1
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 4
scrollFrame.ScrollBarImageColor3 = COLORS.main.border
scrollFrame.Parent = contentContainer

-- Create UIListLayout for organizing buttons
local listLayout = Instance.new("UIListLayout")
listLayout.Padding = UDim.new(0, 12)
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Parent = scrollFrame

-- Add a category label
local categoryLabel = Instance.new("TextLabel")
categoryLabel.Size = UDim2.new(1, -10, 0, 25)
categoryLabel.BackgroundTransparency = 1
categoryLabel.Text = "🎮 GAME FEATURES"
categoryLabel.TextColor3 = COLORS.text.subtitle
categoryLabel.Font = Enum.Font.GothamBold
categoryLabel.TextSize = 14
categoryLabel.TextXAlignment = Enum.TextXAlignment.Left
categoryLabel.LayoutOrder = 0
categoryLabel.Parent = scrollFrame

-- Add a notification system
local notificationSystem = Instance.new("Frame")
notificationSystem.Name = "NotificationSystem"
notificationSystem.Size = UDim2.new(0, 250, 1, 0)
notificationSystem.Position = UDim2.new(1, -260, 0, 0)
notificationSystem.BackgroundTransparency = 1
notificationSystem.Parent = menu

local notificationList = Instance.new("UIListLayout")
notificationList.Padding = UDim.new(0, 10)
notificationList.HorizontalAlignment = Enum.HorizontalAlignment.Center
notificationList.VerticalAlignment = Enum.VerticalAlignment.Bottom
notificationList.SortOrder = Enum.SortOrder.LayoutOrder
notificationList.Parent = notificationSystem

-- Function to create a notification
local function CreateNotification(title, message, duration)
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(0, 220, 0, 75)
    notification.BackgroundColor3 = Color3.fromRGB(40, 40, 80)
    notification.BackgroundTransparency = 0.1
    notification.BorderSizePixel = 0
    notification.Parent = notificationSystem
    
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 8)
    notifCorner.Parent = notification
    
    local notifStroke = Instance.new("UIStroke")
    notifStroke.Color = COLORS.main.highlight
    notifStroke.Thickness = 1.5
    notifStroke.Parent = notification
    
    local notifGradient = Instance.new("UIGradient")
    notifGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 100)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 80))
    })
    notifGradient.Rotation = 45
    notifGradient.Parent = notification
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -20, 0, 25)
    titleLabel.Position = UDim2.new(0, 10, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = COLORS.text.title
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notification
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(1, -20, 0, 35)
    messageLabel.Position = UDim2.new(0, 10, 0, 30)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = COLORS.text.feature
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextSize = 14
    messageLabel.TextWrapped = true
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.Parent = notification
    
    -- Animation: slide in from right
    notification.Position = UDim2.new(1, 50, 0, 0)
    TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Position = UDim2.new(0, 0, 0, 0)
    }):Play()
    
    -- Dismiss after duration
    delay(duration or 3, function()
        -- Animation: fade out
        local fadeTween = TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            BackgroundTransparency = 1,
            Position = UDim2.new(1, 50, 0, 0)
        })
        
        fadeTween:Play()
        
        for _, child in pairs(notification:GetChildren()) do
            if child:IsA("TextLabel") then
                TweenService:Create(child, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
            elseif child:IsA("UIStroke") then
                TweenService:Create(child, TweenInfo.new(0.5), {Transparency = 1}):Play()
            end
        end
        
        fadeTween.Completed:Connect(function()
            notification:Destroy()
        end)
    end)
    
    return notification
end

-- Feature implementations
local features = {
    -- Speed Boost feature
    speedBoost = {
        enabled = false,
        toggle = function(enable)
            if enable then
                Humanoid.WalkSpeed = originalWalkSpeed * 2
                CreateNotification("Speed Boost", "Movement speed increased!", 2)
            else
                Humanoid.WalkSpeed = originalWalkSpeed
                CreateNotification("Speed Boost", "Movement speed returned to normal.", 2)
            end
        end
    },
    
    -- Super Jump feature
    superJump = {
        enabled = false,
        toggle = function(enable)
            if enable then
                if Humanoid.UseJumpPower then
                    Humanoid.JumpPower = originalJumpPower * 2
                else
                    Humanoid.JumpHeight = originalJumpHeight * 2
                end
                CreateNotification("Super Jump", "Jump power increased!", 2)
            else
                if Humanoid.UseJumpPower then
                    Humanoid.JumpPower = originalJumpPower
                else
                    Humanoid.JumpHeight = originalJumpHeight
                end
                CreateNotification("Super Jump", "Jump power returned to normal.", 2)
            end
        end
    },
    
    -- Teleport feature
    teleport = {
        enabled = false,
        toggle = function(enable)
            if enable then
                local mouse = LocalPlayer:GetMouse()
                
                -- Create a teleport marker
                local marker = Instance.new("Part")
                marker.Size = Vector3.new(1, 1, 1)
                marker.Anchored = true
                marker.CanCollide = false
                marker.Transparency = 0.5
                marker.Material = Enum.Material.Neon
                marker.BrickColor = BrickColor.new("Cyan")
                marker.Parent = workspace
                
                -- Set up the teleport function
                local function updateMarker()
                    local ray = workspace:Raycast(mouse.UnitRay.Origin, mouse.UnitRay.Direction * 1000, 
                        {LocalPlayer.Character})
                    
                    if ray then
                        marker.Position = ray.Position + Vector3.new(0, 2, 0)
                    end
                end
                
                -- Create the teleport event
                local teleportConnection = RunService.RenderStepped:Connect(updateMarker)
                
                -- Store in the feature for cleanup
                features.teleport.cleanup = function()
                    teleportConnection:Disconnect()
                    marker:Destroy()
                end
                
                -- Create the click connection
                local mouseClickConnection = mouse.Button1Down:Connect(function()
                    if features.teleport.enabled then
                        local ray = workspace:Raycast(mouse.UnitRay.Origin, mouse.UnitRay.Direction * 1000, 
                            {LocalPlayer.Character})
                        
                        if ray then
                            -- Teleport effect
                            local oldPos = HumanoidRootPart.Position
                            local newPos = ray.Position + Vector3.new(0, 3, 0)
                            
                            -- VFX at old position
                            local startEffect = Instance.new("Part")
                            startEffect.Shape = Enum.PartType.Ball
                            startEffect.Size = Vector3.new(2, 2, 2)
                            startEffect.Position = oldPos
                            startEffect.Anchored = true
                            startEffect.CanCollide = false
                            startEffect.Material = Enum.Material.Neon
                            startEffect.BrickColor = BrickColor.new("Bright blue")
                            startEffect.Transparency = 0.3
                            startEffect.Parent = workspace
                            
                            -- Teleport the player
                            HumanoidRootPart.CFrame = CFrame.new(newPos)
                            
                            -- VFX at new position
                            local endEffect = Instance.new("Part")
                            endEffect.Shape = Enum.PartType.Ball
                            endEffect.Size = Vector3.new(2, 2, 2)
                            endEffect.Position = newPos
                            endEffect.Anchored = true
                            endEffect.CanCollide = false
                            endEffect.Material = Enum.Material.Neon
                            endEffect.BrickColor = BrickColor.new("Bright blue")
                            endEffect.Transparency = 0.3
                            endEffect.Parent = workspace
                            
                            -- Animate effects
                            for i = 0, 1, 0.1 do
                                startEffect.Transparency = 0.3 + (i * 0.7)
                                startEffect.Size = Vector3.new(2 + i * 3, 2 + i * 3, 2 + i * 3)
                                endEffect.Transparency = 0.3 + (i * 0.7)
                                endEffect.Size = Vector3.new(2 + i * 3, 2 + i * 3, 2 + i * 3)
                                wait(0.02)
                            end
                            
                            -- Clean up effects
                            startEffect:Destroy()
                            endEffect:Destroy()
                            
                            CreateNotification("Teleport", "Teleported to target location!", 2)
                        end
                    end
                end)
                
                -- Add to cleanup
                local originalCleanup = features.teleport.cleanup
                features.teleport.cleanup = function()
                    mouseClickConnection:Disconnect()
                    if originalCleanup then originalCleanup() end
                end
                
                CreateNotification("Teleport", "Click anywhere to teleport to that location!", 3)
            else
                if features.teleport.cleanup then
                    features.teleport.cleanup()
                    features.teleport.cleanup = nil
                end
                CreateNotification("Teleport", "Teleport mode disabled.", 2)
            end
        end
    },
    
    -- God Mode feature
    godMode = {
        enabled = false,
        toggle = function(enable)
            if enable then
                -- Create a shield
                local shield = Instance.new("Part")
                shield.Name = "GodModeShield"
                shield.Size = Vector3.new(6, 6, 6)
                shield.Transparency = 0.7
                shield.Shape = Enum.PartType.Ball
                shield.Material = Enum.Material.ForceField
                shield.BrickColor = BrickColor.new("Gold")
                shield.CanCollide = false
                shield.Anchored = false
                shield.Parent = Character
                
                -- Weld the shield to the character
                local weld = Instance.new("Weld")
                weld.Part0 = shield
                weld.Part1 = HumanoidRootPart
                weld.C0 = CFrame.new(0, 0, 0)
                weld.Parent = shield
                
                -- Store reference for cleanup
                features.godMode.shield = shield
                
                -- Set up damage protection
                local originalHealth = Humanoid.Health
                local maxHealth = Humanoid.MaxHealth
                
                local healthConnection = Humanoid.HealthChanged:Connect(function(newHealth)
                    if features.godMode.enabled and newHealth < originalHealth then
                        -- Flash the shield
                        TweenService:Create(shield, TweenInfo.new(0.2), {Transparency = 0.4}):Play()
                        wait(0.2)
                        TweenService:Create(shield, TweenInfo.new(0.2), {Transparency = 0.7}):Play()
                        
                        -- Restore health
                        Humanoid.Health = maxHealth
                    end
                    
                    originalHealth = Humanoid.Health
                end)
                
                features.godMode.healthConnection = healthConnection
                
                CreateNotification("God Mode", "You are now protected from damage!", 3)
            else
                -- Remove the shield
                if features.godMode.shield then
                    features.godMode.shield:Destroy()
                    features.godMode.shield = nil
                end
                
                -- Disconnect health monitoring
                if features.godMode.healthConnection then
                    features.godMode.healthConnection:Disconnect()
                    features.godMode.healthConnection = nil
                end
                
                CreateNotification("God Mode", "God mode deactivated.", 2)
            end
        end
    },
    
    -- Fly Hack feature
    flyHack = {
        enabled = false,
        toggle = function(enable)
            if enable then
                local flySpeed = 60 -- Speed multiplier
                local controlModule = {}
                
                -- Create new bodyvelocity
                local bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                bodyVelocity.P = 1250
                bodyVelocity.Parent = HumanoidRootPart
                
                -- Store reference for cleanup
                features.flyHack.bodyVelocity = bodyVelocity
                
                -- Disable gravity
                local oldGravity = workspace.Gravity
                workspace.Gravity = 0
                
                -- Add fly particles
                local flyParticle = Instance.new("ParticleEmitter")
                flyParticle.Texture = "rbxassetid://6914580196" -- Sparkle particle
                flyParticle.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
                flyParticle.Size = NumberSequence.new({
                    NumberSequenceKeypoint.new(0, 0.5),
                    NumberSequenceKeypoint.new(1, 0)
                })
                flyParticle.Transparency = NumberSequence.new({
                    NumberSequenceKeypoint.new(0, 0.5),
                    NumberSequenceKeypoint.new(1, 1)
                })
                flyParticle.Rate = 20
                flyParticle.Lifetime = NumberRange.new(0.5, 1)
                flyParticle.SpreadAngle = Vector2.new(180, 180)
                flyParticle.Speed = NumberRange.new(1, 3)
                flyParticle.Parent = HumanoidRootPart
                
                -- Store reference
                features.flyHack.flyParticle = flyParticle
                
                -- Flying controls
                local controls = {
                    [Enum.KeyCode.W] = Vector3.new(0, 0, -1),
                    [Enum.KeyCode.S] = Vector3.new(0, 0, 1),
                    [Enum.KeyCode.A] = Vector3.new(-1, 0, 0),
                    [Enum.KeyCode.D] = Vector3.new(1, 0, 0),
                    [Enum.KeyCode.Space] = Vector3.new(0, 1, 0),
                    [Enum.KeyCode.LeftControl] = Vector3.new(0, -1, 0)
                }
                
                local controlsActive = {}
                
                local function calculateVelocity()
                    local direction = Vector3.new(0, 0, 0)
                    
                    for key, keyDirection in pairs(controlsActive) do
                        if keyDirection then
                            direction = direction + controls[key]
                        end
                    end
                    
                    -- Normalize if we have a direction
                    if direction.Magnitude > 0 then
                        direction = direction.Unit
                    end
                    
                    -- Get orientation from camera
                    local lookVector = workspace.CurrentCamera.CFrame.LookVector
                    local rightVector = workspace.CurrentCamera.CFrame.RightVector
                    
                    -- Adjust for camera orientation (just horizontal rotation)
                    local adjustedDirection = Vector3.new(0, 0, 0)
                    if direction.X ~= 0 or direction.Z ~= 0 then
                        local horizontalDirection = Vector3.new(direction.X, 0, direction.Z).Unit
                        local rotatedDirection = (rightVector * horizontalDirection.X) + (Vector3.new(lookVector.X, 0, lookVector.Z).Unit * horizontalDirection.Z)
                        adjustedDirection = adjustedDirection + rotatedDirection
                    end
                    
                    -- Add vertical component
                    adjustedDirection = adjustedDirection + Vector3.new(0, direction.Y, 0)
                    
                    -- Apply speed
                    return adjustedDirection * flySpeed
                end
                
                -- Input handling
                local inputBegan = UserInputService.InputBegan:Connect(function(input)
                    if controls[input.KeyCode] and features.flyHack.enabled then
                        controlsActive[input.KeyCode] = true
                        bodyVelocity.Velocity = calculateVelocity()
                    end
                end)
                
                local inputEnded = UserInputService.InputEnded:Connect(function(input)
                    if controls[input.KeyCode] and features.flyHack.enabled then
                        controlsActive[input.KeyCode] = false
                        bodyVelocity.Velocity = calculateVelocity()
                    end
                end)
                
                -- Store connections for cleanup
                features.flyHack.connections = {
                    inputBegan = inputBegan,
                    inputEnded = inputEnded
                }
                
                -- Remember original state for cleanup
                features.flyHack.originalGravity = oldGravity
                
                CreateNotification("Fly Hack", "Flying enabled! Use WASD + Space/Ctrl to fly", 3)
            else
                -- Restore gravity
                if features.flyHack.originalGravity then
                    workspace.Gravity = features.flyHack.originalGravity
                end
                
                -- Remove body velocity
                if features.flyHack.bodyVelocity then
                    features.flyHack.bodyVelocity:Destroy()
                end
                
                -- Remove particle effect
                if features.flyHack.flyParticle then
                    features.flyHack.flyParticle:Destroy()
                end
                
                -- Disconnect input handlers
                if features.flyHack.connections then
                    for _, connection in pairs(features.flyHack.connections) do
                        connection:Disconnect()
                    end
                end
                
                CreateNotification("Fly Hack", "Flying disabled", 2)
            end
        end
    },
    
    -- ESP Vision feature
    espVision = {
        enabled = false,
        toggle = function(enable)
            if enable then
                -- Clean up any existing ESP
                if #espObjects > 0 then
                    for _, obj in pairs(espObjects) do
                        if obj and obj.Parent then
                            obj:Destroy()
                        end
                    end
                    espObjects = {}
                end
                
                -- Function to create ESP for a player
                local function createESP(player)
                    if player == LocalPlayer then return end
                    
                    local character = player.Character
                    if not character then return end
                    
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if not humanoidRootPart then return end
                    
                    -- Create ESP Box
                    local espBox = Instance.new("BoxHandleAdornment")
                    espBox.Name = "ESPBox"
                    espBox.Adornee = humanoidRootPart
                    espBox.AlwaysOnTop = true
                    espBox.ZIndex = 5
                    espBox.Size = Vector3.new(4, 6, 4)
                    espBox.Transparency = 0.7
                    espBox.Color3 = Color3.fromRGB(255, 0, 0) -- Enemy color
                    
                    if player.Team and LocalPlayer.Team and player.Team == LocalPlayer.Team then
                        espBox.Color3 = Color3.fromRGB(0, 255, 0) -- Friendly color
                    end
                    
                    espBox.Parent = humanoidRootPart
                    
                    -- Create Text Label
                    local espText = Instance.new("BillboardGui")
                    espText.Name = "ESPText"
                    espText.Adornee = humanoidRootPart
                    espText.AlwaysOnTop = true
                    espText.ExtentsOffset = Vector3.new(0, 2, 0)
                    espText.Size = UDim2.new(0, 100, 0, 20)
                    espText.Parent = humanoidRootPart
                    
                    local textLabel = Instance.new("TextLabel")
                    textLabel.BackgroundTransparency = 1
                    textLabel.Size = UDim2.new(1, 0, 1, 0)
                    textLabel.Text = player.Name
                    textLabel.TextColor3 = espBox.Color3
                    textLabel.TextStrokeTransparency = 0
                    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                    textLabel.Font = Enum.Font.GothamBold
                    textLabel.TextSize = 12
                    textLabel.Parent = espText
                    
                    -- Add to tracking array
                    table.insert(espObjects, espBox)
                    table.insert(espObjects, espText)
                    
                    return {espBox, espText}
                end
                
                -- Apply ESP to all current players
                for _, player in pairs(Players:GetPlayers()) do
                    pcall(function()
                        createESP(player)
                    end)
                end
                
                -- Track new players joining
                local playerAddedConnection = Players.PlayerAdded:Connect(function(player)
                    if not features.espVision.enabled then return end
                    
                    player.CharacterAdded:Connect(function(character)
                        if not features.espVision.enabled then return end
                        
                        -- Wait for the HumanoidRootPart to load
                        character:WaitForChild("HumanoidRootPart")
                        wait(0.5) -- Short delay to ensure everything loads
                        
                        if features.espVision.enabled then
                            pcall(function()
                                createESP(player)
                            end)
                        end
                    end)
                    
                    -- Initial ESP if character already exists
                    if player.Character then
                        pcall(function()
                            createESP(player)
                        end)
                    end
                end)
                
                -- Store the connection for cleanup
                features.espVision.playerAddedConnection = playerAddedConnection
                
                -- Set up refresh to handle new players or respawns
                local refreshConnection = RunService.Heartbeat:Connect(function()
                    if not features.espVision.enabled then return end
                    
                    -- Every 1 second refresh, using a counter instead of wait()
                    if not features.espVision.refreshCounter then
                        features.espVision.refreshCounter = 0
                    end
                    
                    features.espVision.refreshCounter = features.espVision.refreshCounter + 1
                    
                    if features.espVision.refreshCounter >= 60 then -- assuming 60fps
                        features.espVision.refreshCounter = 0
                        
                        -- Check for missing ESPs
                        for _, player in pairs(Players:GetPlayers()) do
                            if player ~= LocalPlayer and player.Character then
                                local hasESP = false
                                local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
                                
                                if humanoidRootPart then
                                    if humanoidRootPart:FindFirstChild("ESPBox") then
                                        hasESP = true
                                    end
                                    
                                    if not hasESP then
                                        pcall(function()
                                            createESP(player)
                                        end)
                                    end
                                end
                            end
                        end
                    end
                end)
                
                -- Store the refresh connection
                features.espVision.refreshConnection = refreshConnection
                
                CreateNotification("ESP Vision", "Player ESP enabled! You can now see all players through walls.", 3)
            else
                -- Clean up ESP objects
                for _, obj in pairs(espObjects) do
                    if obj and obj.Parent then
                        obj:Destroy()
                    end
                end
                espObjects = {}
                
                -- Disconnect events
                if features.espVision.playerAddedConnection then
                    features.espVision.playerAddedConnection:Disconnect()
                    features.espVision.playerAddedConnection = nil
                end
                
                if features.espVision.refreshConnection then
                    features.espVision.refreshConnection:Disconnect()
                    features.espVision.refreshConnection = nil
                end
                
                CreateNotification("ESP Vision", "ESP disabled", 2)
            end
        end
    },
    
    -- Aimbot feature
    aimbot = {
        enabled = false,
        toggle = function(enable)
            if enable then
                -- Create aimbot FOV indicator
                local aimFOV = Instance.new("Frame")
                aimFOV.Name = "AimbotFOV"
                aimFOV.Size = UDim2.new(0, 200, 0, 200) -- FOV circle size
                aimFOV.AnchorPoint = Vector2.new(0.5, 0.5)
                aimFOV.Position = UDim2.new(0.5, 0, 0.5, 0)
                aimFOV.BackgroundTransparency = 1
                aimFOV.Parent = menu
                
                local fovCircle = Instance.new("ImageLabel")
                fovCircle.Size = UDim2.new(1, 0, 1, 0)
                fovCircle.BackgroundTransparency = 1
                fovCircle.Image = "rbxassetid://3570695787" -- Circle asset
                fovCircle.ImageColor3 = Color3.fromRGB(255, 150, 0)
                fovCircle.ImageTransparency = 0.8
                fovCircle.Parent = aimFOV
                
                -- Store for cleanup
                features.aimbot.fovIndicator = aimFOV
                
                -- Aimbot settings
                local settings = {
                    fovRadius = 100, -- Half the size of our FOV circle
                    sensitivity = 0.5, -- Lower is stronger aim (0-1)
                    teamCheck = true -- Don't aim at teammates
                }
                
                -- Function to get the closest player in FOV
                local function getClosestPlayerInFOV()
                    local closestPlayer = nil
                    local closestDistance = settings.fovRadius
                    
                    for _, player in pairs(Players:GetPlayers()) do
                        if player == LocalPlayer then continue end
                        
                        -- Team check
                        if settings.teamCheck and player.Team and LocalPlayer.Team and player.Team == LocalPlayer.Team then
                            continue
                        end
                        
                        local character = player.Character
                        if not character then continue end
                        
                        local humanoid = character:FindFirstChild("Humanoid")
                        if not humanoid or humanoid.Health <= 0 then continue end
                        
                        local head = character:FindFirstChild("Head")
                        if not head then continue end
                        
                        -- Check if target is visible on screen
                        local vector, onScreen = workspace.CurrentCamera:WorldToScreenPoint(head.Position)
                        if not onScreen then continue end
                        
                        -- Calculate distance from crosshair
                        local crosshairX = workspace.CurrentCamera.ViewportSize.X / 2
                        local crosshairY = workspace.CurrentCamera.ViewportSize.Y / 2
                        
                        local distX = vector.X - crosshairX
                        local distY = vector.Y - crosshairY
                        
                        local distance = math.sqrt((distX * distX) + (distY * distY))
                        
                        -- Check if within FOV radius
                        if distance <= closestDistance then
                            closestPlayer = player
                            closestDistance = distance
                        end
                    end
                    
                    return closestPlayer, closestDistance
                end
                
                -- Aimbot function that runs on RenderStepped
                local function aimbotLoop()
                    if not features.aimbot.enabled then return end
                    
                    -- Only aim when right mouse button is held
                    if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then return end
                    
                    local target, distance = getClosestPlayerInFOV()
                    if not target then return end
                    
                    local character = target.Character
                    if not character then return end
                    
                    local head = character:FindFirstChild("Head")
                    if not head then return end
                    
                    -- Calculate aim direction
                    local aimPos = head.Position
                    
                    -- Create a smoother aim by using lerp
                    local currentCamera = workspace.CurrentCamera
                    local currentCFrame = currentCamera.CFrame
                    
                    local targetCFrame = CFrame.new(currentCamera.CFrame.Position, aimPos)
                    
                    -- Apply sensitivity
                    local lerpFactor = math.clamp(settings.sensitivity, 0.1, 1)
                    local newCFrame = currentCFrame:Lerp(targetCFrame, lerpFactor)
                    
                    -- Update camera CFrame
                    currentCamera.CFrame = newCFrame
                end
                
                -- Connect the aimbot loop
                local renderConnection = RunService.RenderStepped:Connect(aimbotLoop)
                
                -- Store connection for cleanup
                features.aimbot.renderConnection = renderConnection
                
                -- Create settings GUI for the aimbot
                local settingsFrame = Instance.new("Frame")
                settingsFrame.Name = "AimbotSettings"
                settingsFrame.Size = UDim2.new(0, 200, 0, 110)
                settingsFrame.Position = UDim2.new(0, 10, 0, 60)
                settingsFrame.BackgroundColor3 = COLORS.main.background
                settingsFrame.BackgroundTransparency = 0.2
                settingsFrame.BorderSizePixel = 0
                settingsFrame.Visible = false
                settingsFrame.Parent = menu
                
                local settingsCorner = Instance.new("UICorner")
                settingsCorner.CornerRadius = UDim.new(0, 8)
                settingsCorner.Parent = settingsFrame
                
                local settingsTitle = Instance.new("TextLabel")
                settingsTitle.Size = UDim2.new(1, 0, 0, 25)
                settingsTitle.BackgroundTransparency = 1
                settingsTitle.Text = "Aimbot Settings"
                settingsTitle.TextColor3 = COLORS.text.title
                settingsTitle.Font = Enum.Font.GothamBold
                settingsTitle.TextSize = 14
                settingsTitle.Parent = settingsFrame
                
                -- FOV Slider
                local fovLabel = Instance.new("TextLabel")
                fovLabel.Size = UDim2.new(1, -20, 0, 20)
                fovLabel.Position = UDim2.new(0, 10, 0, 30)
                fovLabel.BackgroundTransparency = 1
                fovLabel.Text = "FOV: 100"
                fovLabel.TextColor3 = COLORS.text.feature
                fovLabel.Font = Enum.Font.Gotham
                fovLabel.TextSize = 12
                fovLabel.TextXAlignment = Enum.TextXAlignment.Left
                fovLabel.Parent = settingsFrame
                
                local fovSlider = Instance.new("Frame")
                fovSlider.Size = UDim2.new(1, -20, 0, 5)
                fovSlider.Position = UDim2.new(0, 10, 0, 50)
                fovSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                fovSlider.BorderSizePixel = 0
                fovSlider.Parent = settingsFrame
                
                local fovSliderCorner = Instance.new("UICorner")
                fovSliderCorner.CornerRadius = UDim.new(0, 2)
                fovSliderCorner.Parent = fovSlider
                
                local fovSliderFill = Instance.new("Frame")
                fovSliderFill.Size = UDim2.new(0.5, 0, 1, 0) -- Start at 50%
                fovSliderFill.BackgroundColor3 = COLORS.main.highlight
                fovSliderFill.BorderSizePixel = 0
                fovSliderFill.Parent = fovSlider
                
                local fovSliderFillCorner = Instance.new("UICorner")
                fovSliderFillCorner.CornerRadius = UDim.new(0, 2)
                fovSliderFillCorner.Parent = fovSliderFill
                
                -- Sensitivity Slider
                local sensLabel = Instance.new("TextLabel")
                sensLabel.Size = UDim2.new(1, -20, 0, 20)
                sensLabel.Position = UDim2.new(0, 10, 0, 60)
                sensLabel.BackgroundTransparency = 1
                sensLabel.Text = "Sensitivity: 0.5"
                sensLabel.TextColor3 = COLORS.text.feature
                sensLabel.Font = Enum.Font.Gotham
                sensLabel.TextSize = 12
                sensLabel.TextXAlignment = Enum.TextXAlignment.Left
                sensLabel.Parent = settingsFrame
                
                local sensSlider = Instance.new("Frame")
                sensSlider.Size = UDim2.new(1, -20, 0, 5)
                sensSlider.Position = UDim2.new(0, 10, 0, 80)
                sensSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                sensSlider.BorderSizePixel = 0
                sensSlider.Parent = settingsFrame
                
                local sensSliderCorner = Instance.new("UICorner")
                sensSliderCorner.CornerRadius = UDim.new(0, 2)
                sensSliderCorner.Parent = sensSlider
                
                local sensSliderFill = Instance.new("Frame")
                sensSliderFill.Size = UDim2.new(0.5, 0, 1, 0) -- Start at 50%
                sensSliderFill.BackgroundColor3 = COLORS.main.highlight
                sensSliderFill.BorderSizePixel = 0
                sensSliderFill.Parent = sensSlider
                
                local sensSliderFillCorner = Instance.new("UICorner")
                sensSliderFillCorner.CornerRadius = UDim.new(0, 2)
                sensSliderFillCorner.Parent = sensSliderFill
                
                -- Team Check Toggle
                local teamCheckButton = Instance.new("TextButton")
                teamCheckButton.Size = UDim2.new(1, -20, 0, 20)
                teamCheckButton.Position = UDim2.new(0, 10, 0, 90)
                teamCheckButton.BackgroundTransparency = 1
                teamCheckButton.Text = "Team Check: ON"
                teamCheckButton.TextColor3 = COLORS.text.feature
                teamCheckButton.Font = Enum.Font.Gotham
                teamCheckButton.TextSize = 12
                teamCheckButton.TextXAlignment = Enum.TextXAlignment.Left
                teamCheckButton.Parent = settingsFrame
                
                -- Store for cleanup
                features.aimbot.settingsGui = {
                    frame = settingsFrame,
                    fovSlider = fovSlider,
                    fovSliderFill = fovSliderFill,
                    sensSlider = sensSlider,
                    sensSliderFill = sensSliderFill,
                    teamCheckButton = teamCheckButton
                }
                
                -- Make sliders draggable
                local function makeSliderDraggable(slider, sliderFill, labelObject, valueProperty, minValue, maxValue, formatFunc)
                    local isDragging = false
                    
                    local function updateSlider(input)
                        local pos = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
                        sliderFill.Size = UDim2.new(pos, 0, 1, 0)
                        
                        local value = minValue + (pos * (maxValue - minValue))
                        settings[valueProperty] = value
                        
                        -- Update label
                        labelObject.Text = formatFunc(value)
                        
                        -- Update FOV circle if needed
                        if valueProperty == "fovRadius" then
                            fovCircle.Size = UDim2.new(value / 100, 0, value / 100, 0)
                        end
                    end
                    
                    slider.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            isDragging = true
                            updateSlider(input)
                        end
                    end)
                    
                    slider.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            isDragging = false
                        end
                    end)
                    
                    UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
                            updateSlider(input)
                        end
                    end)
                end
                
                -- Setup FOV slider
                makeSliderDraggable(
                    fovSlider, 
                    fovSliderFill, 
                    fovLabel, 
                    "fovRadius", 
                    50, 
                    200, 
                    function(val) return "FOV: " .. math.floor(val) end
                )
                
                -- Setup Sensitivity slider
                makeSliderDraggable(
                    sensSlider, 
                    sensSliderFill, 
                    sensLabel, 
                    "sensitivity", 
                    0.1, 
                    1, 
                    function(val) return "Sensitivity: " .. string.format("%.2f", val) end
                )
                
                -- Setup Team Check toggle
                teamCheckButton.MouseButton1Click:Connect(function()
                    settings.teamCheck = not settings.teamCheck
                    teamCheckButton.Text = "Team Check: " .. (settings.teamCheck and "ON" or "OFF")
                end)
                
                -- Display settings with Right Mouse + E key
                local settingsToggleConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                    if gameProcessed then return end
                    
                    if input.KeyCode == Enum.KeyCode.E and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
                        settingsFrame.Visible = not settingsFrame.Visible
                    end
                end)
                
                -- Store connection
                features.aimbot.settingsToggleConnection = settingsToggleConnection
                
                CreateNotification("Aimbot", "Aimbot enabled! Hold right-click to aim. Press E while holding to see settings.", 5)
            else
                -- Clean up aimbot components
                if features.aimbot.fovIndicator then
                    features.aimbot.fovIndicator:Destroy()
                    features.aimbot.fovIndicator = nil
                end
                
                if features.aimbot.renderConnection then
                    features.aimbot.renderConnection:Disconnect()
                    features.aimbot.renderConnection = nil
                end
                
                if features.aimbot.settingsToggleConnection then
                    features.aimbot.settingsToggleConnection:Disconnect()
                    features.aimbot.settingsToggleConnection = nil
                end
                
                if features.aimbot.settingsGui then
                    features.aimbot.settingsGui.frame:Destroy()
                    features.aimbot.settingsGui = nil
                end
                
                CreateNotification("Aimbot", "Aimbot disabled", 2)
            end
        end
    },
    
    -- Auto Farm feature 
    autoFarm = {
        enabled = false,
        toggle = function(enable)
            if enable then
                -- Variables to keep track of farming
                local targets = {}
                local currentTarget = nil
                
                -- Find potential targets in the game
                local function findTargets()
                    -- Clear the current targets list
                    targets = {}
                    
                    -- Common naming patterns for collectibles
                    local commonNames = {
                        "Coin", "Gem", "Orb", "Collectible", "Diamond", "Gold", "Cash",
                        "XP", "Chest", "Treasure", "Token"
                    }
                    
                    -- Search workspace for items with common collectible names
                    for _, item in pairs(workspace:GetDescendants()) do
                        -- Check if the item is a part that might be a collectible
                        if item:IsA("BasePart") or item:IsA("Model") then
                            local name = item.Name:lower()
                            
                            for _, pattern in ipairs(commonNames) do
                                if name:find(pattern:lower()) then
                                    table.insert(targets, item)
                                    break
                                end
                            end
                        end
                    end
                    
                    return #targets > 0
                end
                
                -- Function to find the nearest target
                local function getNearestTarget()
                    local nearest = nil
                    local nearestDistance = math.huge
                    
                    for _, target in ipairs(targets) do
                        -- Skip destroyed or invalid targets
                        if not target or not target.Parent or not target:IsA("BasePart") and not target:FindFirstChildWhichIsA("BasePart") then
                            continue
                        end
                        
                        -- Get the target position
                        local position
                        if target:IsA("Model") then
                            local primaryPart = target.PrimaryPart or target:FindFirstChildWhichIsA("BasePart")
                            if primaryPart then
                                position = primaryPart.Position
                            else
                                continue
                            end
                        else
                            position = target.Position
                        end
                        
                        -- Calculate distance
                        local distance = (HumanoidRootPart.Position - position).Magnitude
                        
                        if distance < nearestDistance then
                            nearest = target
                            nearestDistance = distance
                        end
                    end
                    
                    return nearest, nearestDistance
                end
                
                -- Create a highlight to show the target
                local highlight = Instance.new("Highlight")
                highlight.FillColor = Color3.fromRGB(255, 215, 0) -- Gold
                highlight.OutlineColor = Color3.fromRGB(255, 165, 0) -- Orange
                highlight.FillTransparency = 0.5
                highlight.OutlineTransparency = 0.3
                highlight.Parent = Character
                
                -- Store for cleanup
                features.autoFarm.highlight = highlight
                
                -- Start the auto-farm loop
                local function autoFarmLoop()
                    -- First search for targets
                    local foundTargets = findTargets()
                    
                    if not foundTargets then
                        CreateNotification("Auto Farm", "No farming targets found in this game!", 3)
                        return false
                    end
                    
                    CreateNotification("Auto Farm", "Found " .. #targets .. " potential farming targets!", 3)
                    
                    -- Main farming loop
                    local farmingConnection = RunService.Heartbeat:Connect(function()
                        if not features.autoFarm.enabled then
                            return
                        end
                        
                        -- Get the nearest target
                        local target, distance = getNearestTarget()
                        
                        -- If we have a target
                        if target then
                            currentTarget = target
                            
                            -- Highlight the target
                            highlight.Adornee = target
                            
                            -- Get position to move to
                            local targetPosition
                            if target:IsA("Model") then
                                local primaryPart = target.PrimaryPart or target:FindFirstChildWhichIsA("BasePart")
                                if primaryPart then
                                    targetPosition = primaryPart.Position
                                end
                            else
                                targetPosition = target.Position
                            end
                            
                            if targetPosition then
                                -- Move to the target if we're not too close
                                if distance > 5 then
                                    -- Move the character toward the target
                                    local direction = (targetPosition - HumanoidRootPart.Position).Unit
                                    local targetCFrame = CFrame.new(HumanoidRootPart.Position, targetPosition)
                                    
                                    -- Make the humanoid walk toward the target
                                    Humanoid:MoveTo(targetPosition)
                                    
                                    -- Also directly adjust position for faster movement
                                    if distance > 50 then
                                        -- If very far, teleport closer
                                        HumanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(0, 5, 0))
                                        CreateNotification("Auto Farm", "Teleporting to far target...", 1)
                                    end
                                else
                                    -- We're close - try to touch/collect it
                                    HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                                    
                                    -- Remove this target from our list so we move to the next one
                                    for i, t in ipairs(targets) do
                                        if t == target then
                                            table.remove(targets, i)
                                            break
                                        end
                                    end
                                    
                                    -- If we're out of targets, find more
                                    if #targets == 0 then
                                        findTargets()
                                    end
                                end
                            end
                        else
                            -- No target, try to find more
                            findTargets()
                            if #targets == 0 then
                                CreateNotification("Auto Farm", "No targets left to farm! Searching...", 2)
                            end
                        end
                    end)
                    
                    -- Store the connection for cleanup
                    features.autoFarm.farmingConnection = farmingConnection
                    
                    return true
                end
                
                -- Start auto farming
                local success = autoFarmLoop()
                
                -- Only show success if we actually found targets
                if success then
                    CreateNotification("Auto Farm", "Auto farming started! Collecting items automatically.", 3)
                else
                    -- Toggle back off if no targets found
                    features.autoFarm.enabled = false
                end
            else
                -- Clean up auto-farm components
                if features.autoFarm.farmingConnection then
                    features.autoFarm.farmingConnection:Disconnect()
                    features.autoFarm.farmingConnection = nil
                end
                
                if features.autoFarm.highlight then
                    features.autoFarm.highlight:Destroy()
                    features.autoFarm.highlight = nil
                end
                
                CreateNotification("Auto Farm", "Auto farming disabled", 2)
            end
        end
    },
    
    -- GUI Theme feature
    guiTheme = {
        enabled = true, -- Default theme is always enabled
        currentTheme = "default",
        themes = {
            default = {
                main = {
                    background = Color3.fromRGB(25, 25, 50),
                    title = Color3.fromRGB(40, 40, 80),
                    border = Color3.fromRGB(90, 90, 220),
                    highlight = Color3.fromRGB(100, 100, 255),
                },
                buttons = {
                    close = Color3.fromRGB(220, 50, 50),
                    minimize = Color3.fromRGB(255, 165, 0),
                    restore = Color3.fromRGB(80, 80, 200),
                    feature = Color3.fromRGB(40, 40, 100),
                    featureHover = Color3.fromRGB(55, 55, 130),
                    featureActive = Color3.fromRGB(70, 70, 160),
                },
                text = {
                    title = Color3.fromRGB(255, 215, 0),
                    button = Color3.fromRGB(255, 255, 255),
                    feature = Color3.fromRGB(220, 220, 255),
                    subtitle = Color3.fromRGB(170, 170, 220),
                }
            },
            dark = {
                main = {
                    background = Color3.fromRGB(15, 15, 20),
                    title = Color3.fromRGB(25, 25, 30),
                    border = Color3.fromRGB(60, 60, 70),
                    highlight = Color3.fromRGB(80, 80, 100),
                },
                buttons = {
                    close = Color3.fromRGB(180, 40, 40),
                    minimize = Color3.fromRGB(200, 130, 0),
                    restore = Color3.fromRGB(50, 50, 70),
                    feature = Color3.fromRGB(30, 30, 40),
                    featureHover = Color3.fromRGB(40, 40, 50),
                    featureActive = Color3.fromRGB(50, 50, 70),
                },
                text = {
                    title = Color3.fromRGB(200, 200, 200),
                    button = Color3.fromRGB(230, 230, 230),
                    feature = Color3.fromRGB(180, 180, 200),
                    subtitle = Color3.fromRGB(150, 150, 170),
                }
            },
            neon = {
                main = {
                    background = Color3.fromRGB(10, 10, 15),
                    title = Color3.fromRGB(15, 15, 25),
                    border = Color3.fromRGB(0, 255, 200),
                    highlight = Color3.fromRGB(0, 255, 170),
                },
                buttons = {
                    close = Color3.fromRGB(255, 50, 100),
                    minimize = Color3.fromRGB(255, 210, 0),
                    restore = Color3.fromRGB(0, 200, 255),
                    feature = Color3.fromRGB(20, 20, 35),
                    featureHover = Color3.fromRGB(30, 30, 50),
                    featureActive = Color3.fromRGB(40, 40, 70),
                },
                text = {
                    title = Color3.fromRGB(0, 255, 200),
                    button = Color3.fromRGB(255, 255, 255),
                    feature = Color3.fromRGB(0, 255, 170),
                    subtitle = Color3.fromRGB(0, 200, 255),
                }
            }
        },
        toggle = function(enable)
            -- This feature just opens the theme selector
            if enable then
                -- Create theme selector GUI
                local themeSelector = Instance.new("Frame")
                themeSelector.Name = "ThemeSelector"
                themeSelector.Size = UDim2.new(0, 200, 0, 180)
                themeSelector.Position = UDim2.new(0.5, -100, 0.5, -90)
                themeSelector.BackgroundColor3 = COLORS.main.background
                themeSelector.BorderSizePixel = 0
                themeSelector.Parent = menu
                themeSelector.ZIndex = 10
                
                local themeSelectorCorner = Instance.new("UICorner")
                themeSelectorCorner.CornerRadius = UDim.new(0, 8)
                themeSelectorCorner.Parent = themeSelector
                
                local themeSelectorTitle = Instance.new("TextLabel")
                themeSelectorTitle.Size = UDim2.new(1, 0, 0, 30)
                themeSelectorTitle.BackgroundTransparency = 1
                themeSelectorTitle.Text = "Select Theme"
                themeSelectorTitle.TextColor3 = COLORS.text.title
                themeSelectorTitle.Font = Enum.Font.GothamBold
                themeSelectorTitle.TextSize = 16
                themeSelectorTitle.ZIndex = 11
                themeSelectorTitle.Parent = themeSelector
                
                local closeThemeButton = Instance.new("TextButton")
                closeThemeButton.Size = UDim2.new(0, 25, 0, 25)
                closeThemeButton.Position = UDim2.new(1, -30, 0, 5)
                closeThemeButton.Text = "✖"
                closeThemeButton.BackgroundColor3 = COLORS.buttons.close
                closeThemeButton.TextColor3 = COLORS.text.button
                closeThemeButton.Font = Enum.Font.GothamBold
                closeThemeButton.TextSize = 14
                closeThemeButton.BorderSizePixel = 0
                closeThemeButton.ZIndex = 11
                closeThemeButton.Parent = themeSelector
                
                local closeThemeCorner = Instance.new("UICorner")
                closeThemeCorner.CornerRadius = UDim.new(0, 6)
                closeThemeCorner.Parent = closeThemeButton
                
                -- Create theme buttons for each theme
                local yOffset = 40
                for themeName, _ in pairs(features.guiTheme.themes) do
                    local themeButton = Instance.new("TextButton")
                    themeButton.Size = UDim2.new(0.9, 0, 0, 40)
                    themeButton.Position = UDim2.new(0.05, 0, 0, yOffset)
                    themeButton.Text = themeName:sub(1,1):upper() .. themeName:sub(2) .. " Theme"
                    themeButton.BackgroundColor3 = COLORS.buttons.feature
                    themeButton.TextColor3 = COLORS.text.feature
                    themeButton.Font = Enum.Font.GothamSemibold
                    themeButton.TextSize = 16
                    themeButton.BorderSizePixel = 0
                    themeButton.ZIndex = 11
                    themeButton.Parent = themeSelector
                    
                    local themeButtonCorner = Instance.new("UICorner")
                    themeButtonCorner.CornerRadius = UDim.new(0, 6)
                    themeButtonCorner.Parent = themeButton
                    
                    -- Highlight current theme
                    if themeName == features.guiTheme.currentTheme then
                        themeButton.BackgroundColor3 = COLORS.buttons.featureActive
                        
                        local checkmark = Instance.new("TextLabel")
                        checkmark.Size = UDim2.new(0, 20, 0, 20)
                        checkmark.Position = UDim2.new(0, 10, 0.5, -10)
                        checkmark.BackgroundTransparency = 1
                        checkmark.Text = "✓"
                        checkmark.TextColor3 = COLORS.text.title
                        checkmark.Font = Enum.Font.GothamBold
                        checkmark.TextSize = 16
                        checkmark.ZIndex = 12
                        checkmark.Parent = themeButton
                    end
                    
                    -- Button actions
                    themeButton.MouseButton1Click:Connect(function()
                        -- Apply the selected theme
                        local selectedTheme = features.guiTheme.themes[themeName]
                        
                        -- Skip if already using this theme
                        if features.guiTheme.currentTheme == themeName then
                            themeSelector:Destroy()
                            return
                        end
                        
                        -- Store the selected theme
                        features.guiTheme.currentTheme = themeName
                        
                        -- Apply theme colors to all UI elements
                        -- Main frame
                        frame.BackgroundColor3 = selectedTheme.main.background
                        frameBorder.Color = selectedTheme.main.border
                        
                        -- Title bar
                        titleBar.BackgroundColor3 = selectedTheme.main.title
                        titleBarFix.BackgroundColor3 = selectedTheme.main.title
                        title.TextColor3 = selectedTheme.text.title
                        
                        -- Control buttons
                        closeButton.BackgroundColor3 = selectedTheme.buttons.close
                        minimizeButton.BackgroundColor3 = selectedTheme.buttons.minimize
                        showButton.BackgroundColor3 = selectedTheme.buttons.restore
                        
                        -- Update all feature buttons
                        for _, buttonInstance in pairs(featureButtonInstances) do
                            buttonInstance.BackgroundColor3 = selectedTheme.buttons.feature
                            
                            for _, child in pairs(buttonInstance:GetChildren()) do
                                if child:IsA("TextLabel") and child.Name ~= "StatusContainer" then
                                    child.TextColor3 = selectedTheme.text.feature
                                end
                            end
                        end
                        
                        -- Update category labels
                        categoryLabel.TextColor3 = selectedTheme.text.subtitle
                        
                        -- Update version label
                        versionLabel.TextColor3 = selectedTheme.text.subtitle
                        
                        -- Update global COLORS table
                        COLORS = selectedTheme
                        
                        -- Close the theme selector
                        themeSelector:Destroy()
                        
                        -- Show notification
                        CreateNotification("Theme Changed", "Applied " .. themeName:sub(1,1):upper() .. themeName:sub(2) .. " Theme", 3)
                    end)
                    
                    -- Hover effects
                    themeButton.MouseEnter:Connect(function()
                        if themeName ~= features.guiTheme.currentTheme then
                            TweenService:Create(themeButton, TweenInfo.new(0.2), {
                                BackgroundColor3 = COLORS.buttons.featureHover
                            }):Play()
                        end
                    end)
                    
                    themeButton.MouseLeave:Connect(function()
                        if themeName ~= features.guiTheme.currentTheme then
                            TweenService:Create(themeButton, TweenInfo.new(0.2), {
                                BackgroundColor3 = COLORS.buttons.feature
                            }):Play()
                        end
                    end)
                    
                    yOffset = yOffset + 45
                end
                
                -- Close the theme selector when the close button is clicked
                closeThemeButton.MouseButton1Click:Connect(function()
                    themeSelector:Destroy()
                end)
                
                -- Make theme selector draggable
                local draggingThemeSelector = false
                local themeStartPos
                local themeStartDragPos
                
                themeSelectorTitle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingThemeSelector = true
                        themeStartPos = themeSelector.Position
                        themeStartDragPos = input.Position
                    end
                end)
                
                themeSelectorTitle.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingThemeSelector = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if draggingThemeSelector and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local delta = input.Position - themeStartDragPos
                        themeSelector.Position = UDim2.new(
                            themeStartPos.X.Scale,
                            themeStartPos.X.Offset + delta.X,
                            themeStartPos.Y.Scale,
                            themeStartPos.Y.Offset + delta.Y
                        )
                    end
                end)
            end
        end
    },
    
    -- Keybinds feature
    keybinds = {
        enabled = false,
        currentBinds = {
            speedBoost = Enum.KeyCode.One,
            superJump = Enum.KeyCode.Two,
            teleport = Enum.KeyCode.Three,
            godMode = Enum.KeyCode.Four,
            flyHack = Enum.KeyCode.Five,
            espVision = Enum.KeyCode.Six,
            aimbot = Enum.KeyCode.Seven,
            autoFarm = Enum.KeyCode.Eight
        },
        toggle = function(enable)
            if enable then
                -- Create keybind selector GUI
                local keybindSelector = Instance.new("Frame")
                keybindSelector.Name = "KeybindSelector"
                keybindSelector.Size = UDim2.new(0, 300, 0, 320)
                keybindSelector.Position = UDim2.new(0.5, -150, 0.5, -160)
                keybindSelector.BackgroundColor3 = COLORS.main.background
                keybindSelector.BorderSizePixel = 0
                keybindSelector.Parent = menu
                keybindSelector.ZIndex = 10
                
                local keybindSelectorCorner = Instance.new("UICorner")
                keybindSelectorCorner.CornerRadius = UDim.new(0, 8)
                keybindSelectorCorner.Parent = keybindSelector
                
                local keybindSelectorTitle = Instance.new("TextLabel")
                keybindSelectorTitle.Size = UDim2.new(1, 0, 0, 30)
                keybindSelectorTitle.BackgroundTransparency = 1
                keybindSelectorTitle.Text = "Customize Keybinds"
                keybindSelectorTitle.TextColor3 = COLORS.text.title
                keybindSelectorTitle.Font = Enum.Font.GothamBold
                keybindSelectorTitle.TextSize = 16
                keybindSelectorTitle.ZIndex = 11
                keybindSelectorTitle.Parent = keybindSelector
                
                local closeKeybindButton = Instance.new("TextButton")
                closeKeybindButton.Size = UDim2.new(0, 25, 0, 25)
                closeKeybindButton.Position = UDim2.new(1, -30, 0, 5)
                closeKeybindButton.Text = "✖"
                closeKeybindButton.BackgroundColor3 = COLORS.buttons.close
                closeKeybindButton.TextColor3 = COLORS.text.button
                closeKeybindButton.Font = Enum.Font.GothamBold
                closeKeybindButton.TextSize = 14
                closeKeybindButton.BorderSizePixel = 0
                closeKeybindButton.ZIndex = 11
                closeKeybindButton.Parent = keybindSelector
                
                local closeKeybindCorner = Instance.new("UICorner")
                closeKeybindCorner.CornerRadius = UDim.new(0, 6)
                closeKeybindCorner.Parent = closeKeybindButton
                
                local keybindInstructions = Instance.new("TextLabel")
                keybindInstructions.Size = UDim2.new(1, 0, 0, 20)
                keybindInstructions.Position = UDim2.new(0, 0, 0, 35)
                keybindInstructions.BackgroundTransparency = 1
                keybindInstructions.Text = "Click a button to change its keybind"
                keybindInstructions.TextColor3 = COLORS.text.subtitle
                keybindInstructions.Font = Enum.Font.Gotham
                keybindInstructions.TextSize = 14
                keybindInstructions.ZIndex = 11
                keybindInstructions.Parent = keybindSelector
                
                local keybindScrollFrame = Instance.new("ScrollingFrame")
                keybindScrollFrame.Size = UDim2.new(1, -20, 1, -70)
                keybindScrollFrame.Position = UDim2.new(0, 10, 0, 60)
                keybindScrollFrame.BackgroundTransparency = 1
                keybindScrollFrame.BorderSizePixel = 0
                keybindScrollFrame.ScrollBarThickness = 4
                keybindScrollFrame.ScrollBarImageColor3 = COLORS.main.border
                keybindScrollFrame.ZIndex = 11
                keybindScrollFrame.Parent = keybindSelector
                
                local keybindListLayout = Instance.new("UIListLayout")
                keybindListLayout.Padding = UDim.new(0, 10)
                keybindListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
                keybindListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                keybindListLayout.Parent = keybindScrollFrame
                
                -- Variable to keep track of which button is being rebound
                local listeningForBind = nil
                
                -- Create a row for each feature
                local featureNames = {
                    {id = "speedBoost", name = "Speed Boost"},
                    {id = "superJump", name = "Super Jump"},
                    {id = "teleport", name = "Teleport"},
                    {id = "godMode", name = "God Mode"},
                    {id = "flyHack", name = "Fly Hack"},
                    {id = "espVision", name = "ESP Vision"},
                    {id = "aimbot", name = "Aimbot"},
                    {id = "autoFarm", name = "Auto Farm"}
                }
                
                for index, feature in ipairs(featureNames) do
                    local keybindRow = Instance.new("Frame")
                    keybindRow.Size = UDim2.new(1, 0, 0, 30)
                    keybindRow.BackgroundTransparency = 1
                    keybindRow.LayoutOrder = index
                    keybindRow.ZIndex = 11
                    keybindRow.Parent = keybindScrollFrame
                    
                    local featureLabel = Instance.new("TextLabel")
                    featureLabel.Size = UDim2.new(0.6, 0, 1, 0)
                    featureLabel.Position = UDim2.new(0, 0, 0, 0)
                    featureLabel.BackgroundTransparency = 1
                    featureLabel.Text = feature.name
                    featureLabel.TextColor3 = COLORS.text.feature
                    featureLabel.Font = Enum.Font.GothamSemibold
                    featureLabel.TextSize = 14
                    featureLabel.TextXAlignment = Enum.TextXAlignment.Left
                    featureLabel.ZIndex = 12
                    featureLabel.Parent = keybindRow
                    
                    local keybindButton = Instance.new("TextButton")
                    keybindButton.Size = UDim2.new(0.4, -10, 1, 0)
                    keybindButton.Position = UDim2.new(0.6, 0, 0, 0)
                    keybindButton.BackgroundColor3 = COLORS.buttons.feature
                    keybindButton.Text = features.keybinds.currentBinds[feature.id].Name
                    keybindButton.TextColor3 = COLORS.text.feature
                    keybindButton.Font = Enum.Font.GothamSemibold
                    keybindButton.TextSize = 14
                    keybindButton.BorderSizePixel = 0
                    keybindButton.ZIndex = 12
                    keybindButton.Parent = keybindRow
                    
                    local keybindButtonCorner = Instance.new("UICorner")
                    keybindButtonCorner.CornerRadius = UDim.new(0, 6)
                    keybindButtonCorner.Parent = keybindButton
                    
                    -- When button is clicked, listen for a new keybind
                    keybindButton.MouseButton1Click:Connect(function()
                        -- Reset previous listening button
                        if listeningForBind then
                            listeningForBind.Text = features.keybinds.currentBinds[listeningForBind.FeatureId].Name
                            listeningForBind.BackgroundColor3 = COLORS.buttons.feature
                        end
                        
                        -- Set this button as listening
                        listeningForBind = keybindButton
                        listeningForBind.FeatureId = feature.id
                        keybindButton.Text = "Press a key..."
                        keybindButton.BackgroundColor3 = COLORS.buttons.featureActive
                    end)
                end
                
                -- Update scroll frame canvas
                keybindListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    keybindScrollFrame.CanvasSize = UDim2.new(0, 0, 0, keybindListLayout.AbsoluteContentSize.Y)
                end)
                
                -- Listen for key presses to set new keybinds
                local inputConnection = UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Keyboard and listeningForBind then
                        -- Update the keybind
                        features.keybinds.currentBinds[listeningForBind.FeatureId] = input.KeyCode
                        
                        -- Update the button text
                        listeningForBind.Text = input.KeyCode.Name
                        listeningForBind.BackgroundColor3 = COLORS.buttons.feature
                        
                        -- Clear the listening state
                        listeningForBind = nil
                        
                        -- Show notification
                        CreateNotification("Keybind Updated", "New keybind set for feature", 2)
                    end
                end)
                
                -- Store for cleanup
                features.keybinds.inputConnection = inputConnection
                
                -- Close button
                closeKeybindButton.MouseButton1Click:Connect(function()
                    keybindSelector:Destroy()
                    
                    -- Disconnect the input listener
                    if features.keybinds.inputConnection then
                        features.keybinds.inputConnection:Disconnect()
                        features.keybinds.inputConnection = nil
                    end
                    
                    -- Start the active keybind listener
                    setupActiveKeybindListener()
                end)
                
                -- Make keybind selector draggable
                local draggingKeybindSelector = false
                local keybindStartPos
                local keybindStartDragPos
                
                keybindSelectorTitle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingKeybindSelector = true
                        keybindStartPos = keybindSelector.Position
                        keybindStartDragPos = input.Position
                    end
                end)
                
                keybindSelectorTitle.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingKeybindSelector = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if draggingKeybindSelector and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local delta = input.Position - keybindStartDragPos
                        keybindSelector.Position = UDim2.new(
                            keybindStartPos.X.Scale,
                            keybindStartPos.X.Offset + delta.X,
                            keybindStartPos.Y.Scale,
                            keybindStartPos.Y.Offset + delta.Y
                        )
                    end
                end)
            else
                -- Close the keybind selector if open
                local selector = menu:FindFirstChild("KeybindSelector")
                if selector then
                    selector:Destroy()
                end
                
                -- Stop the keybind listener
                if features.keybinds.keyListener then
                    features.keybinds.keyListener:Disconnect()
                    features.keybinds.keyListener = nil
                end
                
                -- But keep the keybinds active
                setupActiveKeybindListener()
            end
        end
    }
}

-- Function to initialize keybind listening
function setupActiveKeybindListener()
    -- Disconnect existing listener if there is one
    if features.keybinds.keyListener then
        features.keybinds.keyListener:Disconnect()
        features.keybinds.keyListener = nil
    end
    
    -- Create new listener
    features.keybinds.keyListener = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.UserInputType == Enum.UserInputType.Keyboard then
            -- Find matching keybind
            for featureId, keyCode in pairs(features.keybinds.currentBinds) do
                if input.KeyCode == keyCode then
                    -- Get the button instance for this feature
                    for _, button in pairs(featureButtonInstances) do
                        if button.FeatureId == featureId then
                            -- Simulate a click
                            button.MouseButton1Click:Fire()
                            break
                        end
                    end
                    
                    break
                end
            end
        end
    end)
end

-- Function to create feature buttons with enhanced styling
local function CreateFeatureButton(text, icon, order, isEnabled, featureId, onToggle)
    local button = Instance.new("TextButton")
    button.Name = "FeatureButton_" .. featureId
    button.FeatureId = featureId
    button.Size = UDim2.new(1, -5, 0, 45)
    button.BackgroundColor3 = COLORS.buttons.feature
    button.Text = ""
    button.BorderSizePixel = 0
    button.LayoutOrder = order
    button.AutoButtonColor = false
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = button
    
    -- Add subtle gradient to buttons
    local buttonGradient = Instance.new("UIGradient")
    buttonGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 220, 255))
    })
    buttonGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.92),
        NumberSequenceKeypoint.new(1, 0.96)
    })
    buttonGradient.Rotation = 90
    buttonGradient.Parent = button
    
    local iconLabel = Instance.new("TextLabel")
    iconLabel.Size = UDim2.new(0, 35, 0, 35)
    iconLabel.Position = UDim2.new(0, 10, 0, 5)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = icon
    iconLabel.TextColor3 = COLORS.text.feature
    iconLabel.Font = Enum.Font.GothamBold
    iconLabel.TextSize = 22
    iconLabel.Parent = button
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -65, 0.7, 0)
    textLabel.Position = UDim2.new(0, 55, 0, 2)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text
    textLabel.TextColor3 = COLORS.text.feature
    textLabel.Font = Enum.Font.GothamSemibold
    textLabel.TextSize = 16
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.Parent = button
    
    -- Add status indicator
    local statusContainer = Instance.new("Frame")
    statusContainer.Name = "StatusContainer"
    statusContainer.Size = UDim2.new(0, 60, 0, 20)
    statusContainer.Position = UDim2.new(1, -70, 0.7, 0)
    statusContainer.BackgroundColor3 = isEnabled and Color3.fromRGB(40, 180, 40) or Color3.fromRGB(180, 40, 40)
    statusContainer.BorderSizePixel = 0
    statusContainer.Parent = button
    
    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(0, 10)
    statusCorner.Parent = statusContainer
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(1, 0, 1, 0)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = isEnabled and "ON" or "OFF"
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.Font = Enum.Font.GothamBold
    statusLabel.TextSize = 12
    statusLabel.Parent = statusContainer
    
    -- Button hover effects with enhanced animations
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.buttons.featureHover}):Play()
        TweenService:Create(textLabel, TweenInfo.new(0.2), {Position = UDim2.new(0, 60, 0, 2)}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.buttons.feature}):Play()
        TweenService:Create(textLabel, TweenInfo.new(0.2), {Position = UDim2.new(0, 55, 0, 2)}):Play()
    end)
    
    button.MouseButton1Down:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {
            BackgroundColor3 = COLORS.buttons.featureActive,
            Size = UDim2.new(1, -9, 0, 43)
        }):Play()
    end)
    
    button.MouseButton1Up:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {
            BackgroundColor3 = COLORS.buttons.featureHover,
            Size = UDim2.new(1, -5, 0, 45)
        }):Play()
    end)
    
    -- Add button glow on hover with enhanced effect
    local buttonGlow = Instance.new("UIStroke")
    buttonGlow.Color = COLORS.main.highlight
    buttonGlow.Thickness = 1.5
    buttonGlow.Transparency = 1
    buttonGlow.Parent = button
    
    button.MouseEnter:Connect(function()
        TweenService:Create(buttonGlow, TweenInfo.new(0.3), {Transparency = 0.5}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(buttonGlow, TweenInfo.new(0.3), {Transparency = 1}):Play()
    end)
    
    -- Toggle functionality
    local isActive = isEnabled
    activeFeatures[featureId] = { enabled = isActive }
    
    button.MouseButton1Click:Connect(function()
        isActive = not isActive
        local feature = features[featureId]
        
        if feature then
            feature.enabled = isActive
            feature.toggle(isActive)
            
            -- Update activeFeatures
            activeFeatures[featureId].enabled = isActive
            
            -- Update status
            TweenService:Create(statusContainer, TweenInfo.new(0.3), {
                BackgroundColor3 = isActive and Color3.fromRGB(40, 180, 40) or Color3.fromRGB(180, 40, 40)
            }):Play()
            
            statusLabel.Text = isActive and "ON" or "OFF"
            
            -- Call the callback
            if onToggle then
                onToggle(isActive)
            end
        end
    end)
    
    return button
end

-- Create feature buttons with initial status
local featureButtonsData = {
    {id = "speedBoost", text = "Speed Boost", icon = "⚡", isEnabled = false},
    {id = "superJump", text = "Super Jump", icon = "🦘", isEnabled = false},
    {id = "teleport", text = "Teleport", icon = "🌀", isEnabled = false},
    {id = "godMode", text = "God Mode", icon = "🛡️", isEnabled = false},
    {id = "flyHack", text = "Fly Hack", icon = "🦅", isEnabled = false},
    {id = "espVision", text = "ESP Vision", icon = "👁️", isEnabled = false},
    {id = "aimbot", text = "Aimbot", icon = "🎯", isEnabled = false},
    {id = "autoFarm", text = "Auto Farm", icon = "🌾", isEnabled = false}
}

for i, featureData in ipairs(featureButtonsData) do
    local button = CreateFeatureButton(
        featureData.text, 
        featureData.icon, 
        i + 1, 
        featureData.isEnabled, 
        featureData.id
    )
    button.Parent = scrollFrame
    table.insert(featureButtonInstances, button)
end

-- Add a second category for settings
local settingsLabel = Instance.new("TextLabel")
settingsLabel.Size = UDim2.new(1, -10, 0, 25)
settingsLabel.BackgroundTransparency = 1
settingsLabel.Text = "⚙️ SETTINGS"
settingsLabel.TextColor3 = COLORS.text.subtitle
settingsLabel.Font = Enum.Font.GothamBold
settingsLabel.TextSize = 14
settingsLabel.TextXAlignment = Enum.TextXAlignment.Left
settingsLabel.LayoutOrder = 100
settingsLabel.Parent = scrollFrame

-- Add settings buttons
local settingsButtonsData = {
    {id = "guiTheme", text = "GUI Theme", icon = "🎨", isEnabled = true},
    {id = "keybinds", text = "Keybinds", icon = "⌨️", isEnabled = false}
}

for i, settingData in ipairs(settingsButtonsData) do
    local button = CreateFeatureButton(
        settingData.text, 
        settingData.icon, 
        i + 101, 
        settingData.isEnabled, 
        settingData.id
    )
    button.Parent = scrollFrame
    table.insert(featureButtonInstances, button)
end

-- Update scrolling frame canvas size
listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 15)
end)

-- Add version label at the bottom with enhanced styling
local versionLabel = Instance.new("TextLabel")
versionLabel.Size = UDim2.new(1, 0, 0, 20)
versionLabel.Position = UDim2.new(0, 0, 1, -25)
versionLabel.BackgroundTransparency = 1
versionLabel.Text = "v3.0 Premium"
versionLabel.TextColor3 = Color3.fromRGB(150, 150, 220)
versionLabel.Font = Enum.Font.GothamSemibold
versionLabel.TextSize = 14
versionLabel.Parent = frame

-- Set up dragging functionality with enhanced smoothness
local dragging = false
local dragInput
local dragStart
local startPos

local function updateDrag(input)
    local delta = input.Position - dragStart
    local newPosition = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    
    local tweenInfo = TweenInfo.new(0.07, TWEEN_STYLE, TWEEN_DIRECTION)
    TweenService:Create(frame, tweenInfo, {Position = newPosition}):Play()
end

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        
        -- Change cursor while dragging
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
        updateDrag(input)
    end
end)

-- Implement minimize/restore functionality with enhanced animations
local minimized = false

-- Minimize animation tweens with enhanced effects
local function MinimizeGUI()
    local startSize = frame.Size
    local startPos = frame.Position
    
    -- Calculate end position (bottom of the frame goes to starting position)
    local endPos = UDim2.new(
        startPos.X.Scale, 
        startPos.X.Offset, 
        startPos.Y.Scale, 
        startPos.Y.Offset + startSize.Y.Offset
    )
    
    -- Create tween to shrink and move
    local tweenInfo = TweenInfo.new(TWEEN_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.In)
    
    -- First tween to shrink the GUI
    local sizeTween = TweenService:Create(frame, tweenInfo, {
        Size = UDim2.new(0, startSize.X.Offset, 0, 0),
        Position = endPos
    })
    
    sizeTween:Play()
    
    sizeTween.Completed:Connect(function()
        frame.Visible = false
        showButton.Visible = true
        
        -- Animate restore button appearance
        showButton.Size = UDim2.new(0, 0, 0, 0)
        showButton.BackgroundTransparency = 1
        showButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + (startSize.X.Offset/2), startPos.Y.Scale, startPos.Y.Offset)
        
        local showTween = TweenService:Create(showButton, TweenInfo.new(0.4, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, 50, 0, 50),
            BackgroundTransparency = 0,
            Position = UDim2.new(0, 15, 0, 15)
        })
        
        showTween:Play()
    end)
end

local function RestoreGUI()
    local originalSize = UDim2.new(0, 280, 0, 350)
    local originalPos = UDim2.new(0.05, 0, 0.05, 0)
    
    -- Hide restore button first
    local hideTween = TweenService:Create(showButton, TweenInfo.new(0.2, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1
    })
    
    hideTween:Play()
    
    hideTween.Completed:Connect(function()
        showButton.Visible = false
        frame.Visible = true
        frame.Size = UDim2.new(0, originalSize.X.Offset, 0, 0)
        
        -- Animate frame restoration
        local restoreTween = TweenService:Create(frame, TweenInfo.new(0.4, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {
            Size = originalSize,
            Position = originalPos
        })
        
        restoreTween:Play()
    end)
end

minimizeButton.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        MinimizeGUI()
    end
end)

showButton.MouseButton1Click:Connect(function()
    minimized = false
    RestoreGUI()
end)

-- Close button functionality with enhanced animation
closeButton.MouseButton1Click:Connect(function()
    -- Disable all active features first
    for featureId, feature in pairs(activeFeatures) do
        if feature.enabled and features[featureId] then
            features[featureId].enabled = false
            features[featureId].toggle(false)
        end
    end
    
    local closeTween = TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Position = UDim2.new(frame.Position.X.Scale, frame.Position.X.Offset + frame.Size.X.Offset/2, 
                            frame.Position.Y.Scale, frame.Position.Y.Offset + frame.Size.Y.Offset/2)
    })
    
    closeTween:Play()
    
    closeTween.Completed:Connect(function()
        menu:Destroy()
    end)
end)

-- Button hover effects for control buttons with enhanced feedback
local function setupButtonHoverEffect(button)
    local originalColor = button.BackgroundColor3
    local hoverColor = Color3.new(
        math.min(originalColor.R * 1.2, 1),
        math.min(originalColor.G * 1.2, 1),
        math.min(originalColor.B * 1.2, 1)
    )
    
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundColor3 = hoverColor,
            Size = UDim2.new(0, button.Size.X.Offset * 1.05, 0, button.Size.Y.Offset * 1.05)
        }):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundColor3 = originalColor,
            Size = UDim2.new(0, button.Size.X.Offset / 1.05, 0, button.Size.Y.Offset / 1.05)
        }):Play()
    end)
    
    -- Press effect
    button.MouseButton1Down:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {
            Size = UDim2.new(0, button.Size.X.Offset * 0.9, 0, button.Size.Y.Offset * 0.9)
        }):Play()
    end)
    
    button.MouseButton1Up:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {
            Size = UDim2.new(0, button.Size.X.Offset / 0.9, 0, button.Size.Y.Offset / 0.9)
        }):Play()
    end)
end

-- Apply hover effects to control buttons
setupButtonHoverEffect(closeButton)
setupButtonHoverEffect(minimizeButton)
setupButtonHoverEffect(showButton)

-- Hotkey system
local function SetupHotkeys()
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == Enum.KeyCode.RightControl then
            minimized = not minimized
            if minimized then
                MinimizeGUI()
            else
                RestoreGUI()
            end
        end
    end)
    
    -- Setup keybind listener for feature toggles
    setupActiveKeybindListener()
end

-- Initialize the GUI
local function InitializeGUI()
    -- Show initial animation
    frame.Size = UDim2.new(0, 0, 0, 0)
    frame.Position = UDim2.new(0.05, 140, 0.05, 175)
    frame.BackgroundTransparency = 1
    
    -- Animate the GUI appearing
    local openTween = TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = UDim2.new(0, 280, 0, 350),
        Position = UDim2.new(0.05, 0, 0.05, 0),
        BackgroundTransparency = 0
    })
    
    openTween:Play()
    
    -- Stagger the animation of UI elements
    for i, child in pairs(scrollFrame:GetChildren()) do
        if child:IsA("TextButton") or child:IsA("TextLabel") then
            child.BackgroundTransparency = 1
            child.TextTransparency = 1
            
            delay(0.1 + (i * 0.05), function()
                TweenService:Create(child, TweenInfo.new(0.3), {
                    BackgroundTransparency = child:IsA("TextButton") and 0 or 1,
                    TextTransparency = 0
                }):Play()
            end)
        end
    end
    
    -- Setup hotkey system
    SetupHotkeys()
    
    -- Show welcome notification
    delay(0.5, function()
        CreateNotification("WRGui Premium", "Welcome to the enhanced GUI! Click on features to toggle them.", 5)
    end)
}

InitializeGUI()

print("WRGui Premium successfully loaded!")
